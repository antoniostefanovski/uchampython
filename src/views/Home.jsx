import React, { useEffect, useState } from "react";
import '../styles/HomeCSS.css';
import logo from '../assets/logo.png';
import landingPart from '../assets/landingPart.jpg';
import { Fade } from "react-awesome-reveal";
import { Slide } from "react-awesome-reveal";
import { SiPython } from "react-icons/si";
import { BsArrowUpRightSquare } from "react-icons/bs";
import Footer from "../components/Footer";
import { Link } from "react-router-dom";
import { Dialog, DialogTitle, DialogContent, DialogActions, Button } from '@material-ui/core';
import { HashLink } from 'react-router-hash-link';
import BackToTop from "../components/BackToTop";

function Home () {

    var [selectedCard, setSelectedCard] = useState(null);
    const [open, setOpen] = useState(false);

    useEffect(() => {
        document.title = "Учам Python - Почетна";
      }, []);


    let cardsInfo = [
        { 
            title: "Python Syntax", 
            content: "Колку се разликува од останатите програмски јазици", 
            dialogContent: "Запознајте се со едноставната синтакса на Python. Таа користи вовлекување за да ги дефинира блоковите на кодот, што го олеснува разбирањето на структурата на програмата. Поддржува динамично пишување, дозволувајќи им на променливите да се доделуваат без експлицитно да се специфицираат нивните типови на податоци. " 
        },

        {
            title: "Variables", 
            content: "Што се променливите и што може да сместиме во нив", 
            dialogContent: "Во Python, променливите се користат за складирање и манипулирање со податоци. Тие служат како именувани контејнери кои содржат вредности од различни типови.Променливите во Python се динамично напишани, што значи дека не треба експлицитно да го декларирате нивниот тип. Можете едноставно да доделите вредност на променливата користејќи го операторот =. Променливите може да се преназначуваат повеќе пати низ програмата, овозможувајќи флексибилност и лесна манипулација со податоците." 
        },

        { 
            title: "Data Types", 
            content: "Какви се податочни типови постојат", 
            dialogContent: "Python нуди широк опсег на типови на податоци за да претставуваат различни видови информации. Вклучува фундаментални типови како што се цели броеви, броеви со подвижна запирка и низи, кои се користат за претставување на нумерички и текстуални податоци соодветно. Python, исто така, обезбедува напредни типови на податоци како листи, торки и речници, кои овозможуваат посложени структури на податоци и складирање на повеќе вредности." 
        },

        { 
            title: "Operators", 
            content: "За што ни служат операторите и каде да ги употребиме", 
            dialogContent: "Python обезбедува богат сет на оператори кои овозможуваат извршување на различни операции на податоци. Аритметичките оператори како што се +, -, *, / и % овозможуваат математички пресметки, додека операторот ** се користи за степенување. Python нуди и логички оператори (и, или, не) за евалуација на Булови изрази и споредбени оператори (==, !=, <, >, <=, >=) за споредување вредности. Дополнително, постојат оператори за доделување (+=, -=, *=, /=) кои комбинираат операција со доделување. " 
        },

        { 
            title: "Lists", 
            content: "Служат за да сместиме повеќе податоци на едно место", 
            dialogContent: "Во Python,  листата е разновидна и променлива структура на податоци која ви овозможува да складирате збирка на ставки во одреден редослед. Списоците се дефинирани со помош на квадратни загради [] и може да содржат елементи од различни типови на податоци, вклучувајќи броеви, низи или дури и други листи. Тие поддржуваат различни операции како што се додавање, вметнување и отстранување на елементи, што ги прави флексибилни за динамична манипулација со податоци. До листите може да се пристапи според нивните индекси, почнувајќи од 0, а можете да користите и сечење за да извлечете подлисти. Со нивната флексибилност и вградени методи, листите се широко користени во Python за задачи кои вклучуваат збирки на податоци." 
        },

        { 
            title: "Tuples", 
            content: "Слична функционалност имаат со листите", 
            dialogContent: "Во Python, торката е непроменлива структура на податоци која ви овозможува да складирате збирка елементи. Торките се дефинираат со помош на загради () или може да се креираат без никакви разграничувачи. Тие можат да содржат елементи од различни типови на податоци, слични на листите. Откако ќе се дефинираат, елементите на торката не можат да се модифицираат, што ги прави непроменливи. Торките најчесто се користат кога сакате да групирате поврзани податоци заедно, а нивната непроменливост обезбедува интегритет и стабилност на податоците. До нив може да се пристапи со користење на индексирање и сечење, исто како листите." 
        },

        { 
            title: "Sets", 
            content: "Како се разликуваат од листите и tuples", 
            dialogContent: "Во Python,множеството е неподредена колекција на уникатни елементи. Множествата се дефинираат со помош на кадрави(curly) загради {} или функцијата set(). За разлика од листите или торките, множествота не го зачувуваат редоследот на елементите и не дозволуваат дупликати. Ова ги прави комплетите корисни за задачи како што се отстранување дупликати од список или ефикасно тестирање на членството. Сетовите поддржуваат различни операции како што се спојување, пресек и разлика, овозможувајќи ви да вршите операции на множества како што се комбинирање множества или пронаоѓање заеднички елементи. Со нивната уникатност и сет операции, множествата обезбедуваат моќна алатка за манипулирање и работа со различни елементи во Python." 
        },

        { 
            title: "Math", 
            content: "Библиотеката во Python која ни ја олеснува работата", 
            dialogContent: "Математичкиот модул на Python обезбедува широк опсег на математички функции и константи за извршување на сложени математички операции. Вклучува функции за основни аритметички операции како квадратни корени, степенување, логаритми и тригонометриски функции како што се синус, косинус и тангент. Математичкиот модул нуди и функции за заокружување на броеви, генерирање случајни броеви и работа со математички константи како PI и e. Дополнително, математичкиот модул ви овозможува да работите со понапредни математички концепти, како што се фактори, апсолутни вредности и логаритамски функции. Со математичкиот модул, Python обезбедува робустен комплет алатки за извршување на математички пресметки во вашите програми." 
        },

        { 
            title: "If..Else", 
            content: "Научете како да ги користите логичките услови", 
            dialogContent: "Во Python, исказот if...else се користи за контрола на текот на програмата врз основа на одредени услови. Тоа ви овозможува да извршите различни блокови на код во зависност од тоа дали условот е точно или неточен. Наредбата if е проследена со услов во загради, и ако условот се процени на точно, се извршува кодниот блок вовлечен под изјавата if. Ако условот е неточен, наместо тоа, се извршува блокот со код под изјавата else, вовлечен на истото ниво. Ова овозможува условно извршување и помага во спроведувањето на логиката и донесувањето одлуки во програмите на Python." 
        },
        
        { 
            title: "While Loops", 
            content: "Циклуси кои вртат се додека не се исполне некој услов", 
            dialogContent: "Во Python, јамката while е изјава за контролен тек што постојано извршува блок од код се додека одредената состојба е вистинита(true). Условот се проверува пред секое повторување и ако се процени како точно, се извршува кодниот блок. Јамката продолжува додека состојбата не стане лажна(false). Додека циклусите се корисни кога сакате да повторите одредена задача додека не се исполни одреден услов, и тие обезбедуваат начин за креирање итеративни и интерактивни програми во Python. Сепак, важно е да се осигура дека состојбата на крајот ќе стане лажна(false) за да се спречат бесконечни јамки."
        },

        { 
            title: "For Loops", 
            content: "Циклуси кои ви помагаат при сложени пресметки", 
            dialogContent: "Во Python, јамката for е разноврсна конструкција што се користи за повторување преку низа или збирка на ставки. Ви овозможува постојано извршување на блок код за секој елемент во низата. Јамката се повторува автоматски, движејќи се низ секоја ставка додека не останат повеќе елементи. За јамките вообичаено се користат кога однапред го знаете бројот на повторувања или кога сакате да повторувате во одреден опсег на вредности. Тие обезбедуваат пригоден начин за обработка и манипулација со податоци, извршување пресметки или извршување на сет на инструкции за секој елемент во низа." 
        },

        { 
            title: "Arrays & Matrix", 
            content: "Како да работите со низи и матрици за складирање и манипулирање со големи групи на податоци", 
            dialogContent: "Низата е збирка на елементи од ист тип на податоци, до кои се пристапува преку нивниот индекс. Обезбедува ефикасно складирање и пребарување на податоци, што го прави погоден за математички и научни пресметки. Матрицата е дводимензионална низа со редови и колони, која често се користи за задачи како што се линеарна алгебра и операции со матрици." 
        },

        { 
            title: "Functions", 
            content: "Моќта на функциите е огромна и ви заштедува доста време", 
            dialogContent: "Функцијата е повторно употреблив блок од код кој извршува одредена задача. Функциите помагаат да се организира кодот, да се подобри можноста за повторна употреба и да се направи програмата модуларна. Тие се дефинирани со помош на клучниот збор „def“, проследено со името на функцијата и множество загради кои содржат опционални параметри. Функциите може да имаат повратни вредности, овозможувајќи им да произведуваат резултати или да вршат операции."
        },

        { 
            title: "Classes & Objects", 
            content: "Светот на објектно-ориентираното програмирање е составен од класи и објекти", 
            dialogContent: "Во Python, класата е план за создавање на објекти кои ги инкапсулираат податоците и функционалноста. Ја дефинира структурата и однесувањето на објектите од одреден тип. Објектите се примери на класа, кои претставуваат специфични ентитети со свои уникатни податоци и однесување. Класите содржат атрибути, кои се променливи кои чуваат податоци и методи, кои се функции кои работат на тие податоци. Со користење на класи и објекти, Python поддржува објектно-ориентирано програмирање, овозможувајќи модуларен, повторно употреблив и организиран код кој ги моделира ентитетите од реалниот свет и нивните интеракции." 
        },

    ];

    const handleClick = (cardIndex) => {
        setSelectedCard(cardIndex);
        setOpen(true);
      };
    
    const handleClose = () => {
        setSelectedCard(null);
        setOpen(false);
    };

    const getCardsContainer = (idx, numOfCards) => {
        let cards = cardsInfo.slice(idx, idx + numOfCards).map((card, index) => (
            <div className="card" key={index+idx} onClick={() => handleClick(index+idx)}>
                <h2>{card.title}</h2>
                <p>{card.content}</p>
            </div>
        ))

        let div = React.createElement(
            'div',
            { className:'cards-container'},
            cards
        );

        return div;
    }

    let remainder = cardsInfo.length % 4;
    let lenght = cardsInfo.length - remainder;
    let cardContainers = [];

    for(let i = 0; i < (lenght/4); i++) {
       cardContainers.push(getCardsContainer(i*4, 4));
    }

    if (remainder > 0) {
        cardContainers.push(getCardsContainer(lenght,remainder));
    }

    return(
        <>
        <div className="nav-bar-container">
            <img src={logo} alt="Logo"/>
        </div>
            <div className="landing-container">
                <Fade delay={500} duration={2000} when="mount">
                    <div className="two-column-container">
                        <div className="text-content">
                            <h1>Учам <span>Python</span></h1>
                            <hr/>
                            <p>Учам Python е платформа која ви овозможува да научите програмирање користејќи го програмскиот јазик Python. Нашиот курс е бесплатен и достапен за секој.</p>
                            <p>Курсот е дизајниран да биде достапен и привлечен, со интерактивни вежби и примери кои ќе ви помогнат да ги изградите вашите програмски вештини. Исто така не е потребно никакво предзнаење !</p>
                            <p>Без разлика дали сакате да научите нова вештина, да започнете кариера во технологијата или едноставно да ја истражите вашата љубопитност, Учам Python може да ви помогне да ги постигнете вашите цели.</p>
                            </div>
                        <div>
                            <img src={landingPart} alt="LandingPart"/>
                         </div>
                    </div>
                </Fade>
                {/* What will we learn container */}
                <div className="wwwl-container">
                    <Slide delay={500} duration={1500} when="mount" direction="down">
                        <h1><span><SiPython/></span> Што ќе <span>изучуваме</span> ?</h1>
                    </Slide>
                </div>
                
                {/* <div className="cards-container">
                    <div className="card">
                        <h2>Python Syntax</h2>
                        <p>Колку се разликува од останатите програмски јазици</p>
                    </div>

                    <div className="card">
                        <h2>Variables</h2>
                        <p>Што се променливите и што може да сместиме во нив</p>
                    </div>

                    <div className="card">
                        <h2>Data Types</h2>
                        <p>Какви се податочни типови постојат</p>
                    </div>

                    <div className="card">
                        <h2>Operators</h2>
                        <p>За што ни служат операторите и каде да ги употребиме</p>
                    </div>
                </div>

                <div className="cards-container">
                    <div className="card">
                        <h2>Lists</h2>
                        <p>Служат за да сместиме повеќе податоци на едно место</p>
                    </div>

                    <div className="card">
                        <h2>Tuples</h2>
                        <p>Слична функционалност имаат со листите</p>
                    </div>

                    <div className="card">
                        <h2>Sets</h2>
                        <p>Како се разликуваат од листите и tuples</p>
                    </div>

                    <div className="card">
                        <h2>Math</h2>
                        <p>Библиотеката во Python која ни ја олеснува работата</p>
                    </div>
                </div>

                <div className="cards-container">
                    <div className="card">
                        <h2>If..Else</h2>
                        <p>Научете како да ги користите логичките услови</p>
                    </div>

                    <div className="card">
                        <h2>While Loops</h2>
                        <p>Циклуси кои вртат се додека не се исполне некој услов</p>
                    </div>

                    <div className="card">
                        <h2>For Loops</h2>
                        <p>Циклуси кои ви помагаат при сложени пресметки</p>
                    </div>

                    <div className="card">
                        <h2>Arrays & Matrix</h2>
                        <p>Како да работите со низи и матрици за складирање и манипулирање со големи групи на податоци</p>
                    </div>
                </div>

                <div className="cards-container">
                    <div className="card">
                        <h2>Functions</h2>
                        <p>Моќта на функциите е огромна и ви заштедува доста време</p>
                    </div>

                    <div className="card">
                        <h2>Classes & Objects</h2>
                        <p>Светот на објектно-ориентираното програмирање е составен од класи и објекти</p>
                    </div>
                </div> */}

                
                {cardContainers.map((container, idx) => <div key={idx}>{container}</div>)}


                <div className="startnow-container">
                    <h1>Започнете уште одма</h1>
                    <p>Не двоумете се и впуштете се во забавата со кодирање со само еден клик</p>
                    <Link to="/Lecture/0"><button>ЗАПОЧНИ</button></Link>
                </div>

                { selectedCard != null && (
                    <Dialog open={true} onClose={handleClose} className="dialog-modal">
                        <DialogTitle className="dialog-title">{cardsInfo[selectedCard].title}</DialogTitle>
                        <DialogContent>
                        <p>{cardsInfo[selectedCard].dialogContent}</p>
                        <br/>
                        <HashLink to={`/Lecture/1`} className="dialog-link"><p>Започни со курсот <BsArrowUpRightSquare/></p></HashLink>
                        </DialogContent>
                        <DialogActions>
                        <Button onClick={handleClose} color="primary">Затвори</Button>
                        </DialogActions>
                    </Dialog>
                )}
            </div>
            <BackToTop/>
            <Footer/>
        </>
    )
}

export default Home;